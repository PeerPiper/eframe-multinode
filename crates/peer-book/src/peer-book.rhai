/* 
AUTOGNERATED FILE DO NOT EDIT!

Type-safe source generated by build.rs
*/


// peer-book.rhai 
// This is rhai script, controlling the logic flow of what html fragments to render.

// Here, we call the function "render" which is 'registered' witht the rhai engine,
// so it will call some Rust code to show the rendered html.
render(`
<!-- First we show the search vlad section -->
<div><label>Peer Book</label><input value="{{vlad}}"><button data-on-click="search(vlad)">Search</button></div>

<!-- Next we show the results of the search -->
<div>${ 
    if is_def_var("get_record") {
        // loop over get_record and display the key and optional result if it exists
        get_record.values().map(|val| {
            `<div><div class="flex-row"><label>${val}</label></div><div><label>Found Vlad! Add nickname to contacts?</label><input value="{{nickname}}"><button data-on-click="add-to-contacts(vlad, nickname)">Add to contacts</button></div></div>`
        })
        .reduce(|acc, x| acc + x)

    } else {
        `<p>Enter a VLAD to search.</p>`
    }
 } </div>

<!-- List Vlad & Nicknames in our PeerBook -->
<div><p>List Vlad nicknames from our PeerBook</p><div>${ 
    // Save the loaded contacts from wasm into rhai Scope.
    // This should persist them for the next time we load the plugin.

    // loop over contacts and display the vlad and nickname and notes 
    if contacts().len() > 0 {
        contacts().map(|contact| {
            let vlad = contact[0];
            let nickname = contact[1];
            let notes = contact[2];

            `<div class="flex-row"><span>${nickname}</span><span>${notes}</span></div>`

        })
        .reduce(|acc, s| acc + s, "")
    } else {
        "<p>No contacts found.</p>"
        }
 } </div></div>
`)

