package component:plugin;

interface run {

  // from ./deps/host.wit
  use host:component/types.{event, key-args};

  variant mk-error {
    /// The error message
    invalid-codec(string),
    /// Wallet uninitialized 
    wallet-uninitialized,
    /// Mulitkey Error 
    multikey-error(string),
    /// Key not found 
    key-not-found(string),
  }

  record prove-args {
    /// The Multikey
    mk: list<u8>,
    /// The data
    data: list<u8>,
  }

  /// loads just the XML like markdown
  load: func() -> string;

  /// Register wasm functions to be bound to Rhai
  /// Returns a list of func names that are to be bound
  register: func() -> list<string>;

  /// create a seed and lock it 
  create: func(username: string, password: string);

  /// Unlock an existing encrypted seed 
  unlock: func(username: string, password: string, encrypted-seed: string);

  /// Gets the Multikey 
  get-mk: func(args: key-args) -> result<list<u8>, mk-error>;

  /// Proves the data for the given Multikey.
  prove: func(args: prove-args) -> result<list<u8>, mk-error>;

  /// Returns whether the wallet is unlocked or not 
  unlocked: func() -> bool;
}

/// An example world for the component to target.
world plugin-world {

  /// Import the event handler.
  // from ./deps/host.wit
  import host:component/host;

  export run;
  
}
